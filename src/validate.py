import pickle
import pandas as pd
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
from src.train import PreprossesData

class ValidateData():
    '''Validate dataset according to the task'''

    def __init__(self):
        pass

    def predict_explain(self, clf, X_val):
        '''Make explanation of classification
        The decision_path method outputs an indicator matrix that allows us to
        retrieve the nodes the samples of interest traverse through. '''

        with open('../data/explain.txt', 'a') as f:
            f.write('prediction\texplanation\n')
            f.close()

        # using decision_path, we find the rules that were valid for
        # each sample in the validation sample
        for i in range(X_val[X_val.columns].shape[0]-1):
            # using the only i row of X_val
            decision_path = clf.decision_path(X_val[X_val.columns][i:i+1])
            # tree path depth
            level_length = len(decision_path.indices)
            j = 1
            str = ''
            for node_id in decision_path.indices:
                if j < level_length:
                    col_name = X_val.columns[clf.tree_.feature[node_id]]
                    # threshold is an array of nodes splitting points
                    threshold_value = clf.tree_.threshold[node_id]
                    rule = "{} <= {} (actual value = {})".format(col_name, threshold_value,
                                                          X_val[X_val.columns][i:i+1][col_name].values)
                    str += rule + ' '
                j = j + 1
            with open('../data/explain.txt', 'a') as f:
                f.write('{}\t{}\n'.format(clf.predict(X_val[X_val.columns][i:i+1]), str))
                f.close()

    def calc_metrics(self, y_real, y_pred):
        '''Calculates metrics: true negative, false positive,
        false negative, true positive, accuracy, precision,
        recall and f1'''

        tn, fp, fn, tp = confusion_matrix(y_real, y_pred).ravel()
        acc = accuracy_score(y_real, y_pred)
        prec = precision_score(y_real, y_pred)
        rec = recall_score(y_real, y_pred)
        f1 = f1_score(y_real, y_pred)

        with open('../data/validation.txt', 'w') as f:
            f.write('True positive: {}\n'.format(tp))
            f.write('False positive: {}\n'.format(fp))
            f.write('False negative: {}\n'.format(fn))
            f.write('True negative: {}\n'.format(tn))
            f.write('Accuracy: {}\n'.format(acc))
            f.write('Precision: {}\n'.format(prec))
            f.write('Recall: {}\n'.format(rec))
            f.write('F1: {}\n'.format(f1))

if __name__ == '__main__':
    with open('../data/clf_model.pkl', 'rb') as f:
        clf = pickle.load(f)

    val_df = pd.read_csv("../data/val.tsv", sep='\t')
    X_val = val_df.drop(['is_virus'], axis=1)
    y_val = val_df.is_virus

    prep = PreprossesData()
    X_val = prep.extract_features(X_val).iloc[:, 1:]
    y_val_pred = clf.predict(X_val)

    validate = ValidateData()
    validate.calc_metrics(y_val, y_val_pred)
